buildscript {
    ext.flywayVersion = '11.12.0'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.flywaydb:flyway-database-postgresql:${flywayVersion}")
    }
}

plugins {
	id 'org.jetbrains.kotlin.jvm' version '2.2.10'
	id 'org.jetbrains.kotlin.plugin.spring' version '2.2.10'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
    id 'org.jlleitschuh.gradle.ktlint' version '13.1.0'
    id 'org.flywaydb.flyway' version '11.12.0'
    id 'nu.studer.jooq' version "10.1.1"
}

def flywayVersion = project.ext.flywayVersion
def kotlinVersion = '2.2.10'
def jooqVersion = '3.20.6'

ext["jooq.version"] = jooqVersion

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'Book management system with Kotlin'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation "org.flywaydb:flyway-core:${flywayVersion}"
	implementation "org.flywaydb:flyway-database-postgresql:${flywayVersion}"
	implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	runtimeOnly 'org.postgresql:postgresql'
	jooqGenerator 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

ktlint {
    version = "1.7.1"
    android = false
    outputToConsole = true
    ignoreFailures = false
    reporters {
        reporter "plain"
        reporter "checkstyle"
    }
    filter {
        include("src/**/*.kt")
        include("src/**/*.kts")
        include("scripts/**/*.kt")
        include("scripts/**/*.kts")
        exclude("**/build/**")
    }

}

tasks.withType(org.jlleitschuh.gradle.ktlint.tasks.KtLintCheckTask).configureEach {
    setSource(
        files(
            fileTree("src/main/kotlin"),
            fileTree("src/test/kotlin"),
            fileTree("scripts")
        )
    )
}

tasks.matching { it.name.startsWith("ktlint") }.configureEach {
    if (this is org.jlleitschuh.gradle.ktlint.tasks.KtLintCheckTask ||
        this is org.jlleitschuh.gradle.ktlint.tasks.KtLintFormatTask
    ) {
        exclude("**/generated/**")
        exclude("**/generated-src/**")
        exclude("${'$'}buildDir/generated-src/**")
    }
}

flyway {
    url = 'jdbc:postgresql://localhost:5432/book_management'
    user = 'postgres'
    password = 'postgres'
    schemas = ['public']
    cleanDisabled = true
}

jooq {
    version = jooqVersion
    configurations {
        main {
            generateSchemaSourceOnCompilation = false
            jooqConfiguration.with {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc.with {
                    driver = 'org.postgresql.Driver'
                    url = 'jdbc:postgresql://localhost:5432/book_management'
                    user = 'postgres'
                    password = 'postgres'
                }
                generator.with {
                    name = 'org.jooq.codegen.KotlinGenerator'
                    database.with {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        includes = '.*'
                    }
                    generate.with {
                        pojos = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target.with {
                        packageName = 'com.example.demo.infrastructure.jooq'
                        directory = "${project.buildDir}/generated-src/jooq/main"
                    }
                }
            }
        }
    }
}

tasks.named('generateJooq') {
    dependsOn 'flywayMigrate'
}
